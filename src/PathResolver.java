import java.io.File;

/**
 * ‡∏Ñ‡∏•‡∏≤‡∏™‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ path ‡∏Ç‡∏≠‡∏á resources ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡∏à‡∏≤‡∏Å IDE ‡πÅ‡∏•‡∏∞ command line
 */
public class PathResolver {
    private static String projectRoot = null;
    
    static {
        // ‡∏´‡∏≤ project root directory
        String currentDir = System.getProperty("user.dir");
        File current = new File(currentDir);
        
        // ‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ô‡∏à‡∏≤‡∏Å src/ ‡πÉ‡∏´‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ parent
        if (current.getName().equals("src")) {
            projectRoot = current.getParent();
        } else {
            projectRoot = currentDir;
        }
        
        System.out.println("üìÅ Project Root: " + projectRoot);
    }
    
    /**
     * ‡πÅ‡∏õ‡∏•‡∏á relative path ‡πÄ‡∏õ‡πá‡∏ô absolute path
     * @param relativePath path ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å project root (‡πÄ‡∏ä‡πà‡∏ô "res/head/BlueBird/1.png")
     * @return absolute path
     */
    public static String resolve(String relativePath) {
        // ‡∏•‡∏ö "../" ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (relativePath.startsWith("../")) {
            relativePath = relativePath.substring(3);
        }
        
        File file = new File(projectRoot, relativePath);
        return file.getAbsolutePath();
    }
    
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     */
    public static boolean exists(String relativePath) {
        File file = new File(resolve(relativePath));
        return file.exists();
    }
    
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á File object ‡∏à‡∏≤‡∏Å relative path
     */
    public static File getFile(String relativePath) {
        return new File(resolve(relativePath));
    }
}

